/* tslint:disable */
/* eslint-disable */
/**
 * Copm Corda API
 * invoke transactions on a corda ledger
 *
 * The version of the OpenAPI document: 2.0.0-rc.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Determines which flow starting method will be used on the back-end when invoking the flow. Based on the value here the plugin back-end might invoke the rpc.startFlowDynamic() method or the rpc.startTrackedFlowDynamic() method. Streamed responses are aggregated and returned in a single response to HTTP callers who are not equipped to handle streams like WebSocket/gRPC/etc. do.
 * @export
 * @enum {string}
 */

export const FlowInvocationType = {
    TrackedFlowDynamic: 'TRACKED_FLOW_DYNAMIC',
    FlowDynamic: 'FLOW_DYNAMIC'
} as const;

export type FlowInvocationType = typeof FlowInvocationType[keyof typeof FlowInvocationType];


/**
 * 
 * @export
 * @interface InvokeContractV1Request
 */
export interface InvokeContractV1Request {
    /**
     * The fully qualified name of the Corda flow to invoke
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    'flowFullClassName': string;
    /**
     * 
     * @type {FlowInvocationType}
     * @memberof InvokeContractV1Request
     */
    'flowInvocationType': FlowInvocationType;
    /**
     * The list of arguments to pass in to the contract method being invoked.
     * @type {Array<JvmObject>}
     * @memberof InvokeContractV1Request
     */
    'params': Array<JvmObject>;
    /**
     * The amount of milliseconds to wait for a transaction receipt beforegiving up and crashing.
     * @type {number}
     * @memberof InvokeContractV1Request
     */
    'timeoutMs'?: number;
}


/**
 * 
 * @export
 * @interface InvokeContractV1Response
 */
export interface InvokeContractV1Response {
    /**
     * 
     * @type {boolean}
     * @memberof InvokeContractV1Response
     */
    'success': boolean;
    /**
     * Data returned from the JVM when no transaction is running
     * @type {object}
     * @memberof InvokeContractV1Response
     */
    'callOutput': object;
    /**
     * The net.corda.core.flows.StateMachineRunId value returned by the flow execution.
     * @type {string}
     * @memberof InvokeContractV1Response
     */
    'transactionId'?: string;
    /**
     * An array of strings representing the aggregated stream of progress updates provided by a *tracked* flow invocation. If the flow invocation was not tracked, this array is still returned, but as empty.
     * @type {Array<string>}
     * @memberof InvokeContractV1Response
     */
    'progress'?: Array<string>;
    /**
     * The id for the flow handle
     * @type {string}
     * @memberof InvokeContractV1Response
     */
    'flowId': string;
}
/**
 * Can represent JVM primitive and reference types as well. The jvmTypeKind field indicates which one is being stored. If the jvmTypeKind field is set to REFERENCE then the jvmCtorArgs array is expected to be filled, otherwise (e.g. PRIMITIVE jvmTypeKind) it is expected that the primitiveValue property is filled with a primitive data type supported by the JSON standard such as strings, booleans, numbers, etc.
 * @export
 * @interface JvmObject
 */
export interface JvmObject {
    /**
     * 
     * @type {JvmTypeKind}
     * @memberof JvmObject
     */
    'jvmTypeKind': JvmTypeKind;
    /**
     * 
     * @type {any}
     * @memberof JvmObject
     */
    'primitiveValue'?: any;
    /**
     * 
     * @type {Array<JvmObject>}
     * @memberof JvmObject
     */
    'jvmCtorArgs'?: Array<JvmObject>;
    /**
     * 
     * @type {JvmType}
     * @memberof JvmObject
     */
    'jvmType': JvmType;
}


/**
 * Represents a reference to a JVM type (such as a Java class)
 * @export
 * @interface JvmType
 */
export interface JvmType {
    /**
     * 
     * @type {string}
     * @memberof JvmType
     */
    'fqClassName': string;
    /**
     * This parameter is used to specify that the function used to construct this JvmType is not a constructor function but instead is a factory function. Setting this parameter will cause the plugin to look up methods of the class denoted by fqClassName instead of its constructors.
     * @type {string}
     * @memberof JvmType
     */
    'constructorName'?: string;
    /**
     * 
     * @type {JvmObject}
     * @memberof JvmType
     */
    'invocationTarget'?: JvmObject;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const JvmTypeKind = {
    Primitive: 'PRIMITIVE',
    Reference: 'REFERENCE'
} as const;

export type JvmTypeKind = typeof JvmTypeKind[keyof typeof JvmTypeKind];



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Invokes a contract on a Corda ledger (e.g. a flow)
         * @param {InvokeContractV1Request} invokeContractV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1: async (invokeContractV1Request: InvokeContractV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invokeContractV1Request' is not null or undefined
            assertParamExists('invokeContractV1', 'invokeContractV1Request', invokeContractV1Request)
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/invoke-contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invokeContractV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Invokes a contract on a Corda ledger (e.g. a flow)
         * @param {InvokeContractV1Request} invokeContractV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeContractV1(invokeContractV1Request: InvokeContractV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeContractV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeContractV1(invokeContractV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invokeContractV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Invokes a contract on a Corda ledger (e.g. a flow)
         * @param {InvokeContractV1Request} invokeContractV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1(invokeContractV1Request: InvokeContractV1Request, options?: RawAxiosRequestConfig): AxiosPromise<InvokeContractV1Response> {
            return localVarFp.invokeContractV1(invokeContractV1Request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Invokes a contract on a Corda ledger (e.g. a flow)
     * @param {InvokeContractV1Request} invokeContractV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeContractV1(invokeContractV1Request: InvokeContractV1Request, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeContractV1(invokeContractV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}



